// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.6.1
// source: led-service.proto

package led_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LedServiceClient is the client API for LedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LedServiceClient interface {
	LightLED(ctx context.Context, in *LightLEDRequest, opts ...grpc.CallOption) (*LightLEDResponse, error)
	SwitchLED(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type ledServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedServiceClient(cc grpc.ClientConnInterface) LedServiceClient {
	return &ledServiceClient{cc}
}

func (c *ledServiceClient) LightLED(ctx context.Context, in *LightLEDRequest, opts ...grpc.CallOption) (*LightLEDResponse, error) {
	out := new(LightLEDResponse)
	err := c.cc.Invoke(ctx, "/led_service.LedService/LightLED", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledServiceClient) SwitchLED(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/led_service.LedService/SwitchLED", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedServiceServer is the server API for LedService service.
// All implementations must embed UnimplementedLedServiceServer
// for forward compatibility
type LedServiceServer interface {
	LightLED(context.Context, *LightLEDRequest) (*LightLEDResponse, error)
	SwitchLED(context.Context, *empty.Empty) (*empty.Empty, error)
	mustEmbedUnimplementedLedServiceServer()
}

// UnimplementedLedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLedServiceServer struct {
}

func (UnimplementedLedServiceServer) LightLED(context.Context, *LightLEDRequest) (*LightLEDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LightLED not implemented")
}
func (UnimplementedLedServiceServer) SwitchLED(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwitchLED not implemented")
}
func (UnimplementedLedServiceServer) mustEmbedUnimplementedLedServiceServer() {}

// UnsafeLedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LedServiceServer will
// result in compilation errors.
type UnsafeLedServiceServer interface {
	mustEmbedUnimplementedLedServiceServer()
}

func RegisterLedServiceServer(s grpc.ServiceRegistrar, srv LedServiceServer) {
	s.RegisterService(&LedService_ServiceDesc, srv)
}

func _LedService_LightLED_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LightLEDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedServiceServer).LightLED(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/led_service.LedService/LightLED",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedServiceServer).LightLED(ctx, req.(*LightLEDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LedService_SwitchLED_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedServiceServer).SwitchLED(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/led_service.LedService/SwitchLED",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedServiceServer).SwitchLED(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// LedService_ServiceDesc is the grpc.ServiceDesc for LedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "led_service.LedService",
	HandlerType: (*LedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LightLED",
			Handler:    _LedService_LightLED_Handler,
		},
		{
			MethodName: "SwitchLED",
			Handler:    _LedService_SwitchLED_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "led-service.proto",
}
